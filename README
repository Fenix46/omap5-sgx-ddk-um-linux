*********************************************************************
*                         TABLE OF CONTENTS                         *
*********************************************************************

INTRODUCTION
   Highlights
   Limitations
   Package Contents
TARGET SETUP
INSTALL
LOAD
TEST


*********************************************************************
*                            INTRODUCTION                           *
*********************************************************************

This is the Texas Instruments Inc (TI) Driver Development Kit (DDK)
for the SGX graphics cores on Linux OMAP platforms. 

This package contains the user mode libraries and binaries for SGX. These
user mode libraries are developed by Imagination Technologies (IMG). TI 
provides additional enhancements and integration for Linux OMAP.

The kernel mode drivers for SGX are available at:
https://git.ti.com/graphics/omap5-sgx-ddk-linux

The OMAP 5430 kernel drivers follow TI's kernel tree hosted at:
http://omapzoom.org/?p=kernel/omap.git;a=shortlog;h=refs/heads/p-ti-glsdk-3.8.y

----------
Highlights
----------

This is version 1.9.11 of the TI DDK. It is based on IMG's
1.9 DDK post-beta engineering drop (ED2253347) delivery to TI.

This release supports Wayland 1.0.6 and X11

DDK dependencies: gcc 4.7.3, glibc 2.15, libdrm 2.4.41, libgbm 9.0.0, Wayland
1.0.6

-----------
Limitations
-----------
1. Spurious "deadlock" messages when loading omapdrm_pvr kernel module
2. Supports only DRM/KMS, Wayland and X11. No support for Null Window System
3. Kernel panic due to drm_kms_helper sometimes. Reset the board if it occurs
4. Wayland simple-egl example throws a gbm_import_bo error
5. Mmap error observed with Weston with cursor surfaces

----------------
Package Contents
----------------

targetfs/
---------

The 'targetfs' folder contains the user mode modules of SGX DDK for OMAP5/DRA7xx.


*********************************************************************
*                         TARGET SETUP                              *
*********************************************************************

Consult the TI base system setup documentation for instructions on
setting up your target device including boot loader, kernel, and
Arago filesystem. 


*********************************************************************
*                         INSTALL                                   *
*********************************************************************

The procedure to install the DDK user mode libraries is given below.
Refer to the README in https://git.ti.com/graphics/omap5-sgx-ddk-linux
for building and installing the kernel mode driver.

Untar the package and run the following commands on the host with the 
target filesystem mounted:

host $ export DISCIMAGE=<path_to_target_root_filesystem>
host $ cd <path_to_package>
host $ sudo -E make install

PVR EXA driver is copied into /usr/lib/xorg/modules/drivers of the target 
filesystem. The SDK system integrator should copy the EXA driver into 
the relevant X11 driver directory.


*********************************************************************
*                         LOAD                                      *
*********************************************************************

The procedure to load the DDK kernel drivers is given below. 

--------
OMAP DRM
--------

The omapdrm_pvr driver is expected to be loaded before an OpenGLES 
application can be exercised. The pvrsrvinit handles the loading of the 
necessary DRM driver. This step will not be required for X11 window 
system with PVR EXA driver.

target $ pvrsrvinit


*********************************************************************
*                         TEST                                      *
*********************************************************************

The DDK has been verified using the kmscube test application that has 
been included with the SDK file system. This application uses DRM/KMS
and GBM to render a rotating cube on the screen.

Set the LD_LIBRARY_PATH to point to the user libraries and Wayland 
libraries.

target $ kmscube

The DDK has been verified using Weston compositor that has been included
with the SDK file system. This application uses Wayland.

target $ weston --connector=4 

The DDK has been verified with X11 server included in the SDK file system.
DRI2 support has been validated.

target $ export DISPLAY=:0
target $ xinit &
target $ xgles2test1
target $ xmultiegltest
